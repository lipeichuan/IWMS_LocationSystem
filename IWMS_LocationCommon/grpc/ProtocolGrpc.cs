// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace grpc.location {
  public static partial class Location
  {
    static readonly string __ServiceName = "grpc.location.Location";

    static readonly grpc::Marshaller<global::grpc.location.TerminalInfo> __Marshaller_TerminalInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.TerminalInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::grpc.location.SessionInfo> __Marshaller_SessionInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.SessionInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::grpc.location.HeartBeat> __Marshaller_HeartBeat = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.HeartBeat.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::grpc.location.Response> __Marshaller_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::grpc.location.Subject> __Marshaller_Subject = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.Subject.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::grpc.location.DataRequest> __Marshaller_DataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.DataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::grpc.location.DataResponse> __Marshaller_DataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::grpc.location.DataResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::grpc.location.TerminalInfo, global::grpc.location.SessionInfo> __Method_DoRegist = new grpc::Method<global::grpc.location.TerminalInfo, global::grpc.location.SessionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoRegist",
        __Marshaller_TerminalInfo,
        __Marshaller_SessionInfo);

    static readonly grpc::Method<global::grpc.location.HeartBeat, global::grpc.location.Response> __Method_DoHeartBeat = new grpc::Method<global::grpc.location.HeartBeat, global::grpc.location.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoHeartBeat",
        __Marshaller_HeartBeat,
        __Marshaller_Response);

    static readonly grpc::Method<global::grpc.location.Subject, global::grpc.location.Response> __Method_DoSubscribe = new grpc::Method<global::grpc.location.Subject, global::grpc.location.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoSubscribe",
        __Marshaller_Subject,
        __Marshaller_Response);

    static readonly grpc::Method<global::grpc.location.Subject, global::grpc.location.Response> __Method_DoUnsubscribe = new grpc::Method<global::grpc.location.Subject, global::grpc.location.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DoUnsubscribe",
        __Marshaller_Subject,
        __Marshaller_Response);

    static readonly grpc::Method<global::grpc.location.DataRequest, global::grpc.location.DataResponse> __Method_GetScenes = new grpc::Method<global::grpc.location.DataRequest, global::grpc.location.DataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScenes",
        __Marshaller_DataRequest,
        __Marshaller_DataResponse);

    static readonly grpc::Method<global::grpc.location.DataRequest, global::grpc.location.DataResponse> __Method_GetAnchors = new grpc::Method<global::grpc.location.DataRequest, global::grpc.location.DataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnchors",
        __Marshaller_DataRequest,
        __Marshaller_DataResponse);

    static readonly grpc::Method<global::grpc.location.DataRequest, global::grpc.location.DataResponse> __Method_GetTags = new grpc::Method<global::grpc.location.DataRequest, global::grpc.location.DataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTags",
        __Marshaller_DataRequest,
        __Marshaller_DataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::grpc.location.ProtocolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Location</summary>
    public abstract partial class LocationBase
    {
      public virtual global::System.Threading.Tasks.Task<global::grpc.location.SessionInfo> DoRegist(global::grpc.location.TerminalInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::grpc.location.Response> DoHeartBeat(global::grpc.location.HeartBeat request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::grpc.location.Response> DoSubscribe(global::grpc.location.Subject request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::grpc.location.Response> DoUnsubscribe(global::grpc.location.Subject request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::grpc.location.DataResponse> GetScenes(global::grpc.location.DataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::grpc.location.DataResponse> GetAnchors(global::grpc.location.DataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::grpc.location.DataResponse> GetTags(global::grpc.location.DataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Location</summary>
    public partial class LocationClient : grpc::ClientBase<LocationClient>
    {
      /// <summary>Creates a new client for Location</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LocationClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Location that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LocationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LocationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LocationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::grpc.location.SessionInfo DoRegist(global::grpc.location.TerminalInfo request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoRegist(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.SessionInfo DoRegist(global::grpc.location.TerminalInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoRegist, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.SessionInfo> DoRegistAsync(global::grpc.location.TerminalInfo request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoRegistAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.SessionInfo> DoRegistAsync(global::grpc.location.TerminalInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoRegist, null, options, request);
      }
      public virtual global::grpc.location.Response DoHeartBeat(global::grpc.location.HeartBeat request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoHeartBeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.Response DoHeartBeat(global::grpc.location.HeartBeat request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoHeartBeat, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.Response> DoHeartBeatAsync(global::grpc.location.HeartBeat request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoHeartBeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.Response> DoHeartBeatAsync(global::grpc.location.HeartBeat request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoHeartBeat, null, options, request);
      }
      public virtual global::grpc.location.Response DoSubscribe(global::grpc.location.Subject request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoSubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.Response DoSubscribe(global::grpc.location.Subject request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoSubscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.Response> DoSubscribeAsync(global::grpc.location.Subject request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoSubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.Response> DoSubscribeAsync(global::grpc.location.Subject request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoSubscribe, null, options, request);
      }
      public virtual global::grpc.location.Response DoUnsubscribe(global::grpc.location.Subject request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoUnsubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.Response DoUnsubscribe(global::grpc.location.Subject request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoUnsubscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.Response> DoUnsubscribeAsync(global::grpc.location.Subject request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoUnsubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.Response> DoUnsubscribeAsync(global::grpc.location.Subject request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoUnsubscribe, null, options, request);
      }
      public virtual global::grpc.location.DataResponse GetScenes(global::grpc.location.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetScenes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.DataResponse GetScenes(global::grpc.location.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScenes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.DataResponse> GetScenesAsync(global::grpc.location.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetScenesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.DataResponse> GetScenesAsync(global::grpc.location.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScenes, null, options, request);
      }
      public virtual global::grpc.location.DataResponse GetAnchors(global::grpc.location.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAnchors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.DataResponse GetAnchors(global::grpc.location.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnchors, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.DataResponse> GetAnchorsAsync(global::grpc.location.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAnchorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.DataResponse> GetAnchorsAsync(global::grpc.location.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnchors, null, options, request);
      }
      public virtual global::grpc.location.DataResponse GetTags(global::grpc.location.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTags(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::grpc.location.DataResponse GetTags(global::grpc.location.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTags, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.DataResponse> GetTagsAsync(global::grpc.location.DataRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTagsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::grpc.location.DataResponse> GetTagsAsync(global::grpc.location.DataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTags, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LocationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LocationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LocationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DoRegist, serviceImpl.DoRegist)
          .AddMethod(__Method_DoHeartBeat, serviceImpl.DoHeartBeat)
          .AddMethod(__Method_DoSubscribe, serviceImpl.DoSubscribe)
          .AddMethod(__Method_DoUnsubscribe, serviceImpl.DoUnsubscribe)
          .AddMethod(__Method_GetScenes, serviceImpl.GetScenes)
          .AddMethod(__Method_GetAnchors, serviceImpl.GetAnchors)
          .AddMethod(__Method_GetTags, serviceImpl.GetTags).Build();
    }

  }
}
#endregion
